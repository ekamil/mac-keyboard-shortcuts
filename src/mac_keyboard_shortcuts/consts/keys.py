from __future__ import annotations
from enum import Enum
from typing import Optional

from mac_keyboard_shortcuts.types.key import Key


class Keys(Key, Enum):
    # fmt: off
    KEY_0 = ('0', '0', 48, 29, 'ANSI-US')
    KEY_1 = ('1', '1', 49, 18, 'ANSI-US')
    KEY_2 = ('2', '2', 50, 19, 'ANSI-US')
    KEY_3 = ('3', '3', 51, 20, 'ANSI-US')
    KEY_4 = ('4', '4', 52, 21, 'ANSI-US')
    KEY_5 = ('5', '5', 53, 23, 'ANSI-US')
    KEY_6 = ('6', '6', 54, 22, 'ANSI-US')
    KEY_7 = ('7', '7', 55, 26, 'ANSI-US')
    KEY_8 = ('8', '8', 56, 28, 'ANSI-US')
    KEY_9 = ('9', '9', 57, 25, 'ANSI-US')
    KEY_A = ('A', 'a', 97, 0, 'ANSI-US')
    KEY_B = ('B', 'b', 98, 11, 'ANSI-US')
    KEY_C = ('C', 'c', 99, 8, 'ANSI-US')
    KEY_D = ('D', 'd', 100, 2, 'ANSI-US')
    KEY_E = ('E', 'e', 101, 14, 'ANSI-US')
    KEY_F = ('F', 'f', 102, 3, 'ANSI-US')
    KEY_G = ('G', 'g', 103, 5, 'ANSI-US')
    KEY_H = ('H', 'h', 104, 4, 'ANSI-US')
    KEY_I = ('I', 'i', 105, 34, 'ANSI-US')
    KEY_J = ('J', 'j', 106, 38, 'ANSI-US')
    KEY_K = ('K', 'k', 107, 40, 'ANSI-US')
    KEY_L = ('L', 'l', 108, 37, 'ANSI-US')
    KEY_M = ('M', 'm', 109, 46, 'ANSI-US')
    KEY_N = ('N', 'n', 110, 45, 'ANSI-US')
    KEY_O = ('O', 'o', 111, 31, 'ANSI-US')
    KEY_P = ('P', 'p', 112, 35, 'ANSI-US')
    KEY_Q = ('Q', 'q', 113, 12, 'ANSI-US')
    KEY_R = ('R', 'r', 114, 15, 'ANSI-US')
    KEY_S = ('S', 's', 115, 1, 'ANSI-US')
    KEY_T = ('T', 't', 116, 17, 'ANSI-US')
    KEY_U = ('U', 'u', 117, 32, 'ANSI-US')
    KEY_V = ('V', 'v', 118, 9, 'ANSI-US')
    KEY_W = ('W', 'w', 119, 13, 'ANSI-US')
    KEY_X = ('X', 'x', 120, 7, 'ANSI-US')
    KEY_Y = ('Y', 'y', 121, 16, 'ANSI-US')
    KEY_Z = ('Z', 'z', 122, 6, 'ANSI-US')
    KEY_F1 = ('F1', '', 65535, 122, 'Independent')
    KEY_F2 = ('F2', '', 65535, 120, 'Independent')
    KEY_F3 = ('F3', '', 65535, 99, 'Independent')
    KEY_F4 = ('F4', '', 65535, 118, 'Independent')
    KEY_F5 = ('F5', '', 65535, 96, 'Independent')
    KEY_F6 = ('F6', '', 65535, 97, 'Independent')
    KEY_F7 = ('F7', '', 65535, 98, 'Independent')
    KEY_F8 = ('F8', '', 65535, 100, 'Independent')
    KEY_F9 = ('F9', '', 65535, 101, 'Independent')
    KEY_F10 = ('F10', '', 65535, 109, 'Independent')
    KEY_F11 = ('F11', '', 65535, 103, 'Independent')
    KEY_F12 = ('F12', '', 65535, 111, 'Independent')
    KEY_F13 = ('F13', '', 65535, 105, 'Independent')
    KEY_F14 = ('F14', '', 65535, 107, 'Independent')
    KEY_F15 = ('F15', '', 65535, 113, 'Independent')
    KEY_F16 = ('F16', '', 65535, 106, 'Independent')
    KEY_F17 = ('F17', '', 65535, 64, 'Independent')
    KEY_F18 = ('F18', '', 65535, 79, 'Independent')
    KEY_F19 = ('F19', '', 65535, 80, 'Independent')
    KEY_F20 = ('F20', '', 65535, 90, 'Independent')
    KEY_KEYPAD0 = ('Keypad0', '', 65535, 82, 'ANSI-US')
    KEY_KEYPAD1 = ('Keypad1', '', 65535, 83, 'ANSI-US')
    KEY_KEYPAD2 = ('Keypad2', '', 65535, 84, 'ANSI-US')
    KEY_KEYPAD3 = ('Keypad3', '', 65535, 85, 'ANSI-US')
    KEY_KEYPAD4 = ('Keypad4', '', 65535, 86, 'ANSI-US')
    KEY_KEYPAD5 = ('Keypad5', '', 65535, 87, 'ANSI-US')
    KEY_KEYPAD6 = ('Keypad6', '', 65535, 88, 'ANSI-US')
    KEY_KEYPAD7 = ('Keypad7', '', 65535, 89, 'ANSI-US')
    KEY_KEYPAD8 = ('Keypad8', '', 65535, 91, 'ANSI-US')
    KEY_KEYPAD9 = ('Keypad9', '', 65535, 92, 'ANSI-US')
    KEY_KEYPADCLEAR = ('KeypadClear', '', 65535, 71, 'ANSI-US')
    KEY_KEYPADDECIMAL = ('KeypadDecimal', '', 65535, 65, 'ANSI-US')
    KEY_KEYPADDIVIDE = ('KeypadDivide', '', 65535, 75, 'ANSI-US')
    KEY_KEYPADENTER = ('KeypadEnter', '', 65535, 76, 'ANSI-US')
    KEY_KEYPADEQUALS = ('KeypadEquals', '', 65535, 81, 'ANSI-US')
    KEY_KEYPADMINUS = ('KeypadMinus', '', 65535, 78, 'ANSI-US')
    KEY_KEYPADMULTIPLY = ('KeypadMultiply', '', 65535, 67, 'ANSI-US')
    KEY_KEYPADPLUS = ('KeypadPlus', '', 65535, 69, 'ANSI-US')
    KEY_BACKSLASH = ('Backslash', '\\', 92, 42, 'ANSI-US')
    KEY_CAPSLOCK = ('CapsLock', '', 65535, 57, 'Independent')
    KEY_COMMA = ('Comma', ',', 44, 43, 'ANSI-US')
    KEY_COMMAND = ('Command', '', 65535, 55, 'Independent')
    KEY_CONTROL = ('Control', '', 65535, 59, 'Independent')
    KEY_DELETE = ('Delete', '\x7f', 65535, 51, 'Independent')
    KEY_DOWNARROW = ('DownArrow', '', 65535, 125, 'Independent')
    KEY_END = ('End', '', 65535, 119, 'Independent')
    KEY_EQUAL = ('Equal', '=', 61, 24, 'ANSI-US')
    KEY_ESCAPE = ('Escape', '\x1b', 27, 53, 'Independent')
    KEY_FORWARDDELETE = ('ForwardDelete', '', 65535, 117, 'Independent')
    KEY_FUNCTION = ('Function', '', 65535, 63, 'Independent')
    KEY_GRAVE = ('Grave', '`', 96, 50, 'ANSI-US')
    KEY_HELP = ('Help', '', 65535, 114, 'Independent')
    KEY_HOME = ('Home', '', 65535, 115, 'Independent')
    KEY_LEFTARROW = ('LeftArrow', '', 65535, 123, 'Independent')
    KEY_LEFTBRACKET = ('LeftBracket', '[', 91, 33, 'ANSI-US')
    KEY_MINUS = ('Minus', '-', 45, 27, 'ANSI-US')
    KEY_MUTE = ('Mute', '', 65535, 74, 'Independent')
    KEY_OPTION = ('Option', '', 65535, 58, 'Independent')
    KEY_PAGEDOWN = ('PageDown', '', 65535, 121, 'Independent')
    KEY_PAGEUP = ('PageUp', '', 65535, 116, 'Independent')
    KEY_PERIOD = ('Period', '.', 46, 47, 'ANSI-US')
    KEY_QUOTE = ('Quote', "'", 39, 39, 'ANSI-US')
    KEY_RETURN = ('Return', '', 65535, 36, 'Independent')
    KEY_RIGHTARROW = ('RightArrow', '', 65535, 124, 'Independent')
    KEY_RIGHTBRACKET = ('RightBracket', ']', 93, 30, 'ANSI-US')
    KEY_RIGHTCOMMAND = ('RightCommand', '', 65535, 54, 'Independent')
    KEY_RIGHTCONTROL = ('RightControl', '', 65535, 62, 'Independent')
    KEY_RIGHTOPTION = ('RightOption', '', 65535, 61, 'Independent')
    KEY_RIGHTSHIFT = ('RightShift', '', 65535, 60, 'Independent')
    KEY_SEMICOLON = ('Semicolon', ';', 59, 41, 'ANSI-US')
    KEY_SHIFT = ('Shift', '', 65535, 56, 'Independent')
    KEY_SLASH = ('Slash', '/', 47, 44, 'ANSI-US')
    KEY_SPACE = ('Space', ' ', 32, 49, 'Independent')
    KEY_TAB = ('Tab', '\t', 9, 48, 'Independent')
    KEY_UPARROW = ('UpArrow', '', 65535, 126, 'Independent')
    KEY_VOLUMEDOWN = ('VolumeDown', '', 65535, 73, 'Independent')
    KEY_VOLUMEUP = ('VolumeUp', '', 65535, 72, 'Independent')
    # fmt: on

    @classmethod
    def find_key_by_mac_key_code(cls, mac_key_code: int) -> Optional[Key]:
        if matched := list(
            filter(lambda ke: ke.value.mac_key_code == int(mac_key_code), Keys)
        ):
            return matched[0].value
        else:
            return None
